@use "sass:meta";
@use "sass:map";
@use "../../styles-lib" as lib;

// region Setup
@include lib.configure(
    (
        "xs": 0,
        "sm": 110px,
        "md": 210px,
        "lg": 310px,
        "xl": 410px,
        "xxl": 510px,
        "xxxl": 610px,
    ),
    (
        "xs": 100%,
        "sm": 100px,
        "md": 200px,
        "lg": 300px,
        "xl": 400px,
        "xxl": 500px,
        "xxxl": 600px,
    ),
    (
        "columns": 12,
        "gap": 1rem,
    )
);
@include lib.debug-grid;
@include lib.debug-screen-breakpoints;

// endregion

// region Test unit functions
body {
    font-size: lib.rem-calc(16px);
    line-height: lib.unit-strip(16px);
}

// endregion

// region Test container module
.container {
    @include lib.container-apply-widths;
}

.container-with-extra {
    @include lib.container-apply-widths(20px);
}

// endregion

// region Test screen module
body::before {
    @include lib.screen-match(xs, sm) {
        content: "lib.screen-match(xs, sm)";
    }

    @include lib.screen-match(xs, none) {
        content: "lib.screen-match(xs, none)";
    }

    @include lib.screen-match(xs) {
        content: "lib.screen-match(xs)";
    }

    @include lib.screen-max(xs) {
        content: "lib.screen-max(xs)";
    }

    @include lib.screen-max-xs {
        content: "lib.screen-max-xs()";
    }

    @include lib.screen-max-sm {
        content: "lib.screen-max-sm()";
    }

    @include lib.screen-max-md {
        content: "lib.screen-max-md()";
    }

    @include lib.screen-max-lg {
        content: "lib.screen-max-lg()";
    }

    @include lib.screen-min(sm) {
        content: "lib.screen-min(sm)";
    }

    @include lib.screen-min-xs {
        content: "lib.screen-min-xs()";
    }

    @include lib.screen-min-sm {
        content: "lib.screen-min-sm()";
    }

    @include lib.screen-min-md {
        content: "lib.screen-min-md()";
    }

    @include lib.screen-min-lg {
        content: "lib.screen-min-lg()";
    }

    @include lib.screen-min-xl {
        content: "lib.screen-min-xl()";
    }

    @include lib.screen-height(100px, 120px) {
        content: "lib.screen-height(100px, 120px)";
    }

    @include lib.screen-max-height(120px) {
        content: "lib.screen-max-height(120px)";
    }

    @include lib.screen-min-height(100px) {
        content: "lib.screen-min-height(100px)";
    }

    @include lib.screen-hdpi($ratio: 1.3) {
        content: "lib.screen-hdpi($ratio: 1.3)";
    }

    @include lib.screen-utility-apply-properties-for-screens(
        width,
        (
            "xs": 1px,
            "sm": 2px,
        )
    );
    @include lib.screen-utility-apply-properties-for-min-screens(
        width,
        (
            "xs": 1px,
            "sm": 2px,
        )
    );
}

// endregion

// region Test func module
$input: (
    "xs": 100%,
    "sm": 200px,
    "md": 300px,
);

@function double-the-size($value, $key) {
    @return $value * 2;
}

$result: lib.func-map($input, meta.get-function("double-the-size"));

.mapped-width {
    @media screen and (min-width: 0) {
        width: map.get($result, xs);
    }

    @media screen and (min-width: 110px) {
        width: map.get($result, sm);
    }

    @media screen and (min-width: 210px) {
        width: map.get($result, md);
    }
}

$input: (
    "xs": 100%,
    "sm": 200px,
    "md": 300px,
);

@function build-content($value, $key) {
    @return $value + " @ " + $key;
}

$result: lib.func-map($input, meta.get-function("build-content"));

.mapped-content {
    @media screen and (min-width: 0) {
        content: map.get($result, xs);
    }

    @media screen and (min-width: 110px) {
        content: map.get($result, sm);
    }

    @media screen and (min-width: 210px) {
        content: map.get($result, md);
    }
}

// endregion
