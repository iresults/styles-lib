@use "sass:map";
@use "config" as config;
@use "assert";

/// Apply the default container width to the element
///
/// @param {Length} $extra [null] - Add the given extra space to the width
@mixin apply-widths($extra: null) {
    @include -apply-container-width-property(width, $extra);
}

/// Set the `--container-max-width` custom property
///
/// @param {Length} $extra [null] - Add the given extra space to the width
@mixin set-max-width-property($extra: null) {
    @include -apply-container-width-property(--container-max-width, $extra);
}

/// Apply the default container width to the element
///
/// @param {String} $property     - Property to apply the width to
/// @param {Length} $extra [null] - Add the given extra space to the width
@mixin -apply-container-width-property($property, $extra: null) {
    @include assert.is-configured(config.$internal-screen-breakpoints);
    @include assert.is-configured(config.$internal-container-max-widths);

    #{$property}: 100%;

    @each $name, $breakpoint in config.$internal-screen-breakpoints {
        @media (min-width: $breakpoint) {
            @if map.has-key(config.$internal-container-max-widths, $name) {
                $max-width: map.get(config.$internal-container-max-widths, $name);

                @if $extra {
                    #{$property}: calc($max-width + $extra);
                } @else {
                    #{$property}: $max-width;
                }
            }
        }
    }
}
